{"version":3,"sources":["components/contactPicker/ContactPicker.js","components/appointmentForm/AppointmentForm.js","components/tile/Tile.js","components/tileList/TileList.js","containers/appointmentsPage/AppointmentsPage.js","components/contactForm/ContactForm.js","containers/contactsPage/ContactsPage.js","App.js","index.js"],"names":["ContactPicker","contacts","handleContactChange","for","id","onChange","required","value","map","contact","name","AppointmentForm","title","setTitle","setContact","date","setDate","time","setTime","handleSubmit","onSubmit","type","target","min","Date","toLocaleDateString","split","month","day","year","padStart","getTodayString","Tile","content","className","Object","values","entry","index","class","TileList","items","item","AppointmentsPage","appointments","addAppointment","useState","e","preventDefault","ContactForm","setName","phone","setPhone","email","setEmail","pattern","ContactsPage","addContact","phoneNumber","setPhoneNumber","isDuplicate","setIsDuplicate","useEffect","some","App","setAppointment","ROUTES","to","activeClassName","exact","path","prevContacts","prevAppointments","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6e4f8a7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ContactPicker = ({\r\n    contacts,\r\n    handleContactChange\r\n}) => {\r\n    return (\r\n        <div>\r\n            <label for=\"contact\">Contact</label>\r\n            <select id=\"contact\" onChange={handleContactChange} required=\"required\">\r\n                <option value=\"\">--</option>\r\n                {contacts.map(contact => {\r\n                    return (\r\n                        <option value={contact.name}>\r\n                            {contact.name}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { ContactPicker } from '../contactPicker/ContactPicker';\r\n\r\nexport const AppointmentForm = ({\r\n    contacts,\r\n    title,\r\n    setTitle,\r\n    contact,\r\n    setContact,\r\n    date,\r\n    setDate,\r\n    time,\r\n    setTime,\r\n    handleSubmit\r\n}) => {\r\n    const getTodayString = () => {\r\n        const [month, day, year] = new Date()\r\n            .toLocaleDateString(\"en-US\")\r\n            .split(\"/\");\r\n        return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\r\n    };\r\n\r\n    const handleTitleChange = ({ target }) => {\r\n        setTitle(target.value);\r\n    };\r\n\r\n    const handleDateChange = ({ target }) => {\r\n        setDate(target.value);\r\n    };\r\n\r\n    const handleTimeChange = ({ target }) => {\r\n        setTime(target.value);\r\n    };\r\n\r\n    const handleContactChange = ({ target }) => {\r\n        setContact(target.value);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label for=\"title\">Title</label>\r\n            <input type=\"text\" id=\"title\" value={title} onChange={handleTitleChange} required=\"required\" />\r\n            <br />\r\n            <label for=\"date\">Date</label>\r\n            <input type=\"date\" id=\"date\" min={getTodayString()} value={date} onChange={handleDateChange} required=\"required\" />\r\n            <br />\r\n            <label for=\"time\">Time</label>\r\n            <input type=\"time\" id=\"time\" value={time} onChange={handleTimeChange} required=\"required\" />\r\n            <br />\r\n            <ContactPicker\r\n                contacts={contacts}\r\n                handleContactChange={handleContactChange}\r\n            />\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Tile = ({ content }) => {\r\n    return (\r\n        <div className=\"tile-container\">\r\n            {Object.values(content).map((entry, index) => {\r\n                return index === 0\r\n                    ? <p class=\"tile-title\">{entry}</p>\r\n                    : <p class=\"tile\">{entry}</p>;\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Tile } from '../tile/Tile';\r\n\r\nexport const TileList = ({ items }) => {\r\n    return items.map(item => <Tile content={item} />);\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AppointmentForm } from '../../components/appointmentForm/AppointmentForm';\r\nimport { TileList } from '../../components/tileList/TileList';\r\n\r\nexport const AppointmentsPage = ({\r\n    appointments,\r\n    addAppointment,\r\n    contacts\r\n}) => {\r\n    /*\r\n    Define state variables for\r\n    appointment info\r\n    */\r\n    const [title, setTitle] = useState('');\r\n    const [contact, setContact] = useState('');\r\n    const [date, setDate] = useState('');\r\n    const [time, setTime] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        /*\r\n        Add contact info and clear data\r\n        */\r\n        addAppointment(title, contact, date, time);\r\n\r\n        setTitle('');\r\n        setContact('');\r\n        setDate('');\r\n        setTime('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <section>\r\n                <h2>Add Appointment</h2>\r\n                <AppointmentForm\r\n                    contacts={contacts}\r\n                    title={title}\r\n                    setTitle={setTitle}\r\n                    contact={contact}\r\n                    setContact={setContact}\r\n                    date={date}\r\n                    setDate={setDate}\r\n                    time={time}\r\n                    setTime={setTime}\r\n                    handleSubmit={handleSubmit}\r\n                />\r\n            </section>\r\n            <hr />\r\n            <section>\r\n                <h2>Appointments</h2>\r\n                <TileList items={appointments} />\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const ContactForm = ({\r\n    name,\r\n    setName,\r\n    phone,\r\n    setPhone,\r\n    email,\r\n    setEmail,\r\n    handleSubmit\r\n}) => {\r\n    const handleNameChange = ({ target }) => {\r\n        setName(target.value);\r\n    };\r\n\r\n    const handlePhoneNumberChange = ({ target }) => {\r\n        setPhone(target.value);\r\n    };\r\n\r\n    const handleEmailChange = ({ target }) => {\r\n        setEmail(target.value);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label for=\"name\">Name:</label>\r\n            <input type=\"text\" id=\"name\" value={name} onChange={handleNameChange} required=\"required\" />\r\n            <br />\r\n            <label for=\"phone\">Phone Number:</label>\r\n            <input type=\"tel\" id=\"phone\" value={phone} pattern=\"[1-9][0-9]{2}-[1-9][0-9]{2}-[0-9]{4}\" onChange={handlePhoneNumberChange} required=\"required\" />\r\n            <br />\r\n            <label for=\"email\">Email:</label>\r\n            <input type=\"email\" id=\"email\" value={email} onChange={handleEmailChange} required=\"required\" />\r\n            <br />\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { ContactForm } from '../../components/contactForm/ContactForm';\r\nimport { TileList } from '../../components/tileList/TileList';\r\n\r\nexport const ContactsPage = ({\r\n    contacts,\r\n    addContact\r\n}) => {\r\n    /*\r\n    Define state variables for\r\n    contact info and duplicate check\r\n    */\r\n    const [name, setName] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [isDuplicate, setIsDuplicate] = useState(false);\r\n\r\n    useEffect(() => setIsDuplicate(contacts.some(contact => contact.name === name)), [contacts, name]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        /*\r\n        Add contact info and clear data\r\n        if the contact name is not a duplicate\r\n        */\r\n        if (isDuplicate) {\r\n            return;\r\n        }\r\n\r\n        addContact(name, phoneNumber, email);\r\n\r\n        setName('');\r\n        setPhoneNumber('');\r\n        setEmail('');\r\n        setIsDuplicate(false);\r\n    };\r\n\r\n    /*\r\n    Using hooks, check for contact name in the\r\n    contacts array variable in props\r\n    */\r\n\r\n\r\n    return (\r\n        <div>\r\n            <section>\r\n                <h2>Add Contact</h2>\r\n                <ContactForm\r\n                    name={name}\r\n                    setName={setName}\r\n                    phone={phoneNumber}\r\n                    setPhone={setPhoneNumber}\r\n                    email={email}\r\n                    setEmail={setEmail}\r\n                    handleSubmit={handleSubmit}\r\n                />\r\n            </section>\r\n            <hr />\r\n            <section>\r\n                <h2>Contacts</h2>\r\n                <TileList items={contacts} />\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\n\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\n\r\nfunction App() {\r\n    /*\r\n    Define state variables for\r\n    contacts and appointments\r\n    */\r\n    const [contacts, setContact] = useState([]);\r\n    const [appointments, setAppointment] = useState([]);\r\n\r\n    const ROUTES = {\r\n        CONTACTS: \"/contacts\",\r\n        APPOINTMENTS: \"/appointments\",\r\n    };\r\n\r\n    /*\r\n    Implement functions to add data to\r\n    contacts and appointments\r\n    */\r\n    const addContact = (name, phoneNumber, email) => {\r\n        setContact(prevContacts => {\r\n            return [...prevContacts, {\r\n                name,\r\n                phoneNumber,\r\n                email\r\n            }];\r\n        });\r\n    };\r\n\r\n    const addAppointment = (title, contact, date, time) => {\r\n        setAppointment(prevAppointments => [...prevAppointments, {\r\n            title,\r\n            contact,\r\n            date,\r\n            time\r\n        }]);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <nav>\r\n                <NavLink to={ROUTES.CONTACTS} activeClassName=\"active\">\r\n                    Contacts\r\n                </NavLink>\r\n                <NavLink to={ROUTES.APPOINTMENTS} activeClassName=\"active\">\r\n                    Appointments\r\n                </NavLink>\r\n            </nav>\r\n            <main>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <Redirect to={ROUTES.CONTACTS} />\r\n                    </Route>\r\n                    <Route path={ROUTES.CONTACTS}>\r\n                        <ContactsPage\r\n                            contacts={contacts}\r\n                            addContact={addContact}\r\n                        />\r\n                    </Route>\r\n                    <Route path={ROUTES.APPOINTMENTS}>\r\n                        <AppointmentsPage\r\n                            appointments={appointments}\r\n                            addAppointment={addAppointment}\r\n                            contacts={contacts}\r\n                        />\r\n                    </Route>\r\n                </Switch>\r\n            </main>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}